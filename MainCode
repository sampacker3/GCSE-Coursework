
// Include required libraries
#include <MFRC522.h>
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
#include <Keypad.h>
#include <Servo.h>
#include <SPI.h>
#include <Adafruit_NeoPixel.h>
 
 
 // Create instances
#ifdef __AVR__
  #include <avr/power.h>
#endif
// Which pin on the Arduino is connected to the NeoPixels
#define PIN            6
// How many NeoPixels are attached to the Arduino
#define NUMPIXELS      24

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
//Setting up the neopixel

//LiquidCrystal_I2C lcd(0x27, 16, 2); 
LiquidCrystal_I2C lcd(0x27,16,2);  // set the LCD address to 0x27 for a 16 chars and 2 line display
//SCL-21 
//SDA-20
MFRC522 mfrc522(10, 9); // MFRC522 mfrc522(SS_PIN, RST_PIN)
//RST-5 
//SDA-53
//MOSI-51
//MISO-50
//SCK-52
Servo sg90; // Calling the servo data as sg90
//SERVO-2 PWM
// Initialize Pins for led's, servo and buzzer

constexpr uint8_t servoPin = 5; // Servo to pin 5
constexpr uint8_t buzzerPin = 4; //buzzer to pin 4
constexpr uint8_t SolenoidLock = 7; // solenoid lock to pin 7, this connects to the
// gate pinn of the FET controlling the solenoids and the LED strip
#define SS_PIN 10 // MFRC522 mfrc522(SS_PIN, RST_PIN) to arduino
#define RST_PIN 9
char initial_password[4] = {'2', '8', 'A', 'B'};  // Variable to store initial password
String tagUID = "71 9D 88 08" ;  // String to store UID of tag for safe RC522.
char password[4];   // Variable to store users password
boolean RFIDMode = true; // boolean to change modes
char key_pressed = 0; // Variable to store incoming keys
uint8_t i = 0;  // Variable used for counter

int delayval = 80; // delay for  changing of the neopixels when a colour whip is performed

const byte rows = 4; // defining how many rows and columns for keypad
const byte columns = 4; // defining how many rows and columns for keypad


// Keypad pin map
char hexaKeys[rows][columns] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};


// Initializing pins for keypad
byte row_pins[rows] = {A0, A1, A2, A3};
byte column_pins[columns] = {3, 2, 1, 0};
// Utilising a keypad library and pi map to create a matrix for keyad in arduino


// Create instance for keypad
Keypad keypad_key = Keypad( makeKeymap(hexaKeys), row_pins, column_pins, rows, columns);

////////// SETUP CODE ////////// (S.Packer)

void setup() {
  pixels.begin(); // This initializes the NeoPixel library.
  pinMode(buzzerPin, OUTPUT); // Arduino Pin configuration for the buzzer pin
  pinMode(SolenoidLock, OUTPUT); // Arduino Pin configuration for the solenoid lock circuit
  SPI.begin();      // Initiate SPI bus
  mfrc522.PCD_Init();   // Initiate MFRC522
  lcd.init();           // initialize the lcd 
  // Print a message to the LCD.
  lcd.clear(); // Clear LCD screen for prep
  lcd.backlight(); // Turns on the LCD backlight LEd for the display
  sg90.attach(servoPin);  //Declare pin 2 for servo lock
  sg90.write(165); // Set initial position at 165 degrees so that teh door locking bolts are in a locked state at the start
}

////////// MAIN CODE ////////// (S.Packer)

void loop() {
  // System will first look for mode
  if (RFIDMode == true) {
    pixels.begin(); // This initializes the NeoPixel library.
    for(int i=0;i<NUMPIXELS;i++)
      {
       pixels.setPixelColor(i, pixels.Color(5,5,5)); // Moderately white colour.
       pixels.show(); // This sends the updated pixel color to the hardware.
       delay(delayval); // Delay for a period of time (in milliseconds).
      }
    lcd.setCursor(0, 0);  // setting position for the text to be displayed
    lcd.print("  Door Locked!"); // Display messaging to user
    lcd.setCursor(0, 1);
    lcd.print(" Scan Your Tag "); // Display messaging to user
    // Look for new cards
    if ( ! mfrc522.PICC_IsNewCardPresent()) {
      return;
    }
    // Select one of the cards
    if ( ! mfrc522.PICC_ReadCardSerial()) {
      return;
    }
    //Reading from the card
    String tag = "";
    for (byte j = 0; j < mfrc522.uid.size; j++)
    {
      tag.concat(String(mfrc522.uid.uidByte[j] < 0x10 ? " 0" : " "));
      tag.concat(String(mfrc522.uid.uidByte[j], HEX));
    }
    tag.toUpperCase();
    //Checking the card
    if (tag.substring(1) == tagUID)
    {
      ///// If UID of tag is matched /////
      pixels.show(); // initiating neopixels
      lcd.clear();
      lcd.print("  Tag Matched"); // Display messaging to user
      for(int i=0;i<NUMPIXELS;i++)
      {
       pixels.setPixelColor(i, pixels.Color(80,0,220)); // Moderately purple colour.
       pixels.show(); // This sends the updated pixel color to the hardware.
       delay(delayval); // Delay for a period of time (in milliseconds).
      }
      delay(2000);
      lcd.clear();
      lcd.print("Enter Password:"); // Display messaging to user
      lcd.setCursor(0, 1);
      RFIDMode = false; // Make RFID mode false, so it will now go t
    }
    else
    {
      ///// If UID of tag is not matched /////
      pixels.setPixelColor(i++, pixels.Color(0,50,200)); // show a colour to start
      pixels.show(); // initiating neopixels
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Wrong Tag Shown"); // Display messaging to user
      lcd.setCursor(0, 1);
      lcd.print("Access Denied"); // Display messaging to user
      digitalWrite(buzzerPin, HIGH);
      for(int i=0;i<NUMPIXELS;i++)
      {
       pixels.setPixelColor(i, pixels.Color(0,50,200)); // Setting inital colour
       pixels.show();
      }
      delay(500);
      for(int i=0;i<NUMPIXELS;i++)
      {
       pixels.setPixelColor(i, pixels.Color(200,0,0)); // Moderately bright red color.
       pixels.show(); // This sends the updated pixel color to the hardware.
       delay(delayval); // Delay for a period of time (in milliseconds).
      }
      digitalWrite(buzzerPin, LOW);
      pixels.setPixelColor(i, pixels.Color(0,0,0)); // Setting inital colour
      pixels.show();
      lcd.clear();
    }
  }
  ///// If RFID mode is false, it will look for keys from keypad /////
  if (RFIDMode == false) {
    key_pressed = keypad_key.getKey(); // Storing keys
    if (key_pressed)
    {
      password[i++] = key_pressed; // Storing in password variable
      lcd.print("# "); // printing a symbol to show user that key pressed has been registered
    }
    // The arduino is counting the number of keys pressed
    if (i == 4) // If 4 keys are completed
    {
      delay(200);
      if (!(strncmp(password, initial_password, 4))) // If password is matched
      {
        lcd.clear();
        lcd.print(" Pass Accepted"); // Display messaging to user
        digitalWrite(buzzerPin, HIGH);
        digitalWrite(SolenoidLock, HIGH);// Unlocking with solenoid
        sg90.write(60); // Unlocking with servo sg90 
       for(int i=0;i<NUMPIXELS;i++)
      {
       pixels.setPixelColor(i, pixels.Color(0,50,200)); // Setting inital colour
       pixels.show();
      }
      delay(500);
      for(int i=0;i<NUMPIXELS;i++)
      {
       pixels.setPixelColor(i, pixels.Color(10,200,10)); // Moderately bright green colour.
       pixels.show(); // This sends the updated pixel colour to the hardware.
       delay(delayval); // Delay for a period of time (in milliseconds).
      }      
      digitalWrite(buzzerPin, LOW);
      
        delay(20000); //delaying the 20 seconds for the door open position
        ////////////////////////////////////////////////////////////
        sg90.write(162); // Unlocking with servo sg90 
        digitalWrite(SolenoidLock, LOW); // Unlocking with solenoid
        lcd.clear();
         i = 0; // setting i vraiable
        RFIDMode = true;  // Make RFID mode true
      }
      else    ///// If password is not matched /////
      {
        lcd.clear();
        pixels.show();
        lcd.print("Wrong Password"); // Display messaging to user
        digitalWrite(buzzerPin, HIGH);
       for(int i=0;i<NUMPIXELS;i++)
      {
       pixels.setPixelColor(i, pixels.Color(0,50,200)); // Setting inital colour
       pixels.show();
      }
      delay(500);
      for(int i=0;i<NUMPIXELS;i++)
      {
       pixels.setPixelColor(i, pixels.Color(200,0,0)); // Moderately bright red color.
       pixels.show(); // This sends the updated pixel color to the hardware.
       delay(delayval); // Delay for a period of time (in milliseconds).
      }
        digitalWrite(buzzerPin, LOW);
        lcd.clear();
        i = 0;
        RFIDMode = true;  // Make RFID mode true to restart procedure
        // this code will now restart from the start of loop
      }
    }
  }
}
